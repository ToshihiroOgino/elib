// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ToshihiroOgino/elib/domain"
)

func newSharingInfo(db *gorm.DB, opts ...gen.DOOption) sharingInfo {
	_sharingInfo := sharingInfo{}

	_sharingInfo.sharingInfoDo.UseDB(db, opts...)
	_sharingInfo.sharingInfoDo.UseModel(&domain.SharingInfo{})

	tableName := _sharingInfo.sharingInfoDo.TableName()
	_sharingInfo.ALL = field.NewAsterisk(tableName)
	_sharingInfo.ID = field.NewString(tableName, "id")
	_sharingInfo.NoteID = field.NewString(tableName, "note_id")
	_sharingInfo.Editable = field.NewBool(tableName, "editable")

	_sharingInfo.fillFieldMap()

	return _sharingInfo
}

type sharingInfo struct {
	sharingInfoDo sharingInfoDo

	ALL      field.Asterisk
	ID       field.String
	NoteID   field.String
	Editable field.Bool

	fieldMap map[string]field.Expr
}

func (s sharingInfo) Table(newTableName string) *sharingInfo {
	s.sharingInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sharingInfo) As(alias string) *sharingInfo {
	s.sharingInfoDo.DO = *(s.sharingInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sharingInfo) updateTableName(table string) *sharingInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.NoteID = field.NewString(table, "note_id")
	s.Editable = field.NewBool(table, "editable")

	s.fillFieldMap()

	return s
}

func (s *sharingInfo) WithContext(ctx context.Context) ISharingInfoDo {
	return s.sharingInfoDo.WithContext(ctx)
}

func (s sharingInfo) TableName() string { return s.sharingInfoDo.TableName() }

func (s sharingInfo) Alias() string { return s.sharingInfoDo.Alias() }

func (s sharingInfo) Columns(cols ...field.Expr) gen.Columns { return s.sharingInfoDo.Columns(cols...) }

func (s *sharingInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sharingInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["note_id"] = s.NoteID
	s.fieldMap["editable"] = s.Editable
}

func (s sharingInfo) clone(db *gorm.DB) sharingInfo {
	s.sharingInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sharingInfo) replaceDB(db *gorm.DB) sharingInfo {
	s.sharingInfoDo.ReplaceDB(db)
	return s
}

type sharingInfoDo struct{ gen.DO }

type ISharingInfoDo interface {
	gen.SubQuery
	Debug() ISharingInfoDo
	WithContext(ctx context.Context) ISharingInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISharingInfoDo
	WriteDB() ISharingInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISharingInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISharingInfoDo
	Not(conds ...gen.Condition) ISharingInfoDo
	Or(conds ...gen.Condition) ISharingInfoDo
	Select(conds ...field.Expr) ISharingInfoDo
	Where(conds ...gen.Condition) ISharingInfoDo
	Order(conds ...field.Expr) ISharingInfoDo
	Distinct(cols ...field.Expr) ISharingInfoDo
	Omit(cols ...field.Expr) ISharingInfoDo
	Join(table schema.Tabler, on ...field.Expr) ISharingInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISharingInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISharingInfoDo
	Group(cols ...field.Expr) ISharingInfoDo
	Having(conds ...gen.Condition) ISharingInfoDo
	Limit(limit int) ISharingInfoDo
	Offset(offset int) ISharingInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISharingInfoDo
	Unscoped() ISharingInfoDo
	Create(values ...*domain.SharingInfo) error
	CreateInBatches(values []*domain.SharingInfo, batchSize int) error
	Save(values ...*domain.SharingInfo) error
	First() (*domain.SharingInfo, error)
	Take() (*domain.SharingInfo, error)
	Last() (*domain.SharingInfo, error)
	Find() ([]*domain.SharingInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.SharingInfo, err error)
	FindInBatches(result *[]*domain.SharingInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.SharingInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISharingInfoDo
	Assign(attrs ...field.AssignExpr) ISharingInfoDo
	Joins(fields ...field.RelationField) ISharingInfoDo
	Preload(fields ...field.RelationField) ISharingInfoDo
	FirstOrInit() (*domain.SharingInfo, error)
	FirstOrCreate() (*domain.SharingInfo, error)
	FindByPage(offset int, limit int) (result []*domain.SharingInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISharingInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sharingInfoDo) Debug() ISharingInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s sharingInfoDo) WithContext(ctx context.Context) ISharingInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sharingInfoDo) ReadDB() ISharingInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s sharingInfoDo) WriteDB() ISharingInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s sharingInfoDo) Session(config *gorm.Session) ISharingInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s sharingInfoDo) Clauses(conds ...clause.Expression) ISharingInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sharingInfoDo) Returning(value interface{}, columns ...string) ISharingInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sharingInfoDo) Not(conds ...gen.Condition) ISharingInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sharingInfoDo) Or(conds ...gen.Condition) ISharingInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sharingInfoDo) Select(conds ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sharingInfoDo) Where(conds ...gen.Condition) ISharingInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sharingInfoDo) Order(conds ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sharingInfoDo) Distinct(cols ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sharingInfoDo) Omit(cols ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sharingInfoDo) Join(table schema.Tabler, on ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sharingInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sharingInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sharingInfoDo) Group(cols ...field.Expr) ISharingInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sharingInfoDo) Having(conds ...gen.Condition) ISharingInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sharingInfoDo) Limit(limit int) ISharingInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sharingInfoDo) Offset(offset int) ISharingInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sharingInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISharingInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sharingInfoDo) Unscoped() ISharingInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sharingInfoDo) Create(values ...*domain.SharingInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sharingInfoDo) CreateInBatches(values []*domain.SharingInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sharingInfoDo) Save(values ...*domain.SharingInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sharingInfoDo) First() (*domain.SharingInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SharingInfo), nil
	}
}

func (s sharingInfoDo) Take() (*domain.SharingInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SharingInfo), nil
	}
}

func (s sharingInfoDo) Last() (*domain.SharingInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SharingInfo), nil
	}
}

func (s sharingInfoDo) Find() ([]*domain.SharingInfo, error) {
	result, err := s.DO.Find()
	return result.([]*domain.SharingInfo), err
}

func (s sharingInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.SharingInfo, err error) {
	buf := make([]*domain.SharingInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sharingInfoDo) FindInBatches(result *[]*domain.SharingInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sharingInfoDo) Attrs(attrs ...field.AssignExpr) ISharingInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sharingInfoDo) Assign(attrs ...field.AssignExpr) ISharingInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sharingInfoDo) Joins(fields ...field.RelationField) ISharingInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sharingInfoDo) Preload(fields ...field.RelationField) ISharingInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sharingInfoDo) FirstOrInit() (*domain.SharingInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SharingInfo), nil
	}
}

func (s sharingInfoDo) FirstOrCreate() (*domain.SharingInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SharingInfo), nil
	}
}

func (s sharingInfoDo) FindByPage(offset int, limit int) (result []*domain.SharingInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sharingInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sharingInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sharingInfoDo) Delete(models ...*domain.SharingInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sharingInfoDo) withDO(do gen.Dao) *sharingInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
